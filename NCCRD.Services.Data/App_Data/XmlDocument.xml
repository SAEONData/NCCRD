<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NCCRD.Services.Data</name>
    </assembly>
    <members>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.ApiDescriptionExtensions.GetFriendlyId(System.Web.Http.Description.ApiDescription)">
            <summary>
            Generates an URI-friendly ID for the <see cref="T:System.Web.Http.Description.ApiDescription"/>. E.g. "Get-Values-id_name" instead of "GetValues/{id}?name={name}"
            </summary>
            <param name="description">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The ID as a string.</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Areas.HelpPage.HelpPageConfig">
            <summary>
            Use this class to customize the Help Page.
            For example you can set a custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> to supply the documentation
            or you can provide the samples for the requests/responses.
            </summary>
        </member>
        <member name="T:NCCRD.Services.Data.Areas.HelpPage.Controllers.HelpController">
            <summary>
            The controller that will handle requests for the help page.
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageConfigurationExtensions.SetDocumentationProvider(System.Web.Http.HttpConfiguration,System.Web.Http.Description.IDocumentationProvider)">
            <summary>
            Sets the documentation provider for help page.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="documentationProvider">The documentation provider.</param>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleObjects(System.Web.Http.HttpConfiguration,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Sets the objects that will be used by the formatters to produce sample requests/responses.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleObjects">The sample objects.</param>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type and action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample request directly for the specified media type and action with parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type of the action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample response directly for the specified media type of the action with specific parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForMediaType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Sets the sample directly for all actions with the specified media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Sets the sample directly for all actions with the specified type and media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
            <param name="type">The parameter type or return type of an action.</param>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <returns>The help page sample generator.</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageConfigurationExtensions.SetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration,NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator)">
            <summary>
            Sets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleGenerator">The help page sample generator.</param>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageConfigurationExtensions.GetModelDescriptionGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the model description generator.
            </summary>
            <param name="config">The configuration.</param>
            <returns>The <see cref="T:NCCRD.Services.Data.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator"/></returns>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageApiModel(System.Web.Http.HttpConfiguration,System.String)">
            <summary>
            Gets the model that represents an API displayed on the help page. The model is initialized on the first call and cached for subsequent calls.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="apiDescriptionId">The <see cref="T:System.Web.Http.Description.ApiDescription"/> ID.</param>
            <returns>
            An <see cref="T:NCCRD.Services.Data.Areas.HelpPage.Models.HelpPageApiModel"/>
            </returns>
        </member>
        <member name="T:NCCRD.Services.Data.Areas.HelpPage.ModelDescriptions.ModelDescription">
            <summary>
            Describes a type model.
            </summary>
        </member>
        <member name="T:NCCRD.Services.Data.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator">
            <summary>
            Generates model descriptions for given types.
            </summary>
        </member>
        <member name="T:NCCRD.Services.Data.Areas.HelpPage.ModelDescriptions.ModelNameAttribute">
            <summary>
            Use this attribute to change the name of the <see cref="T:NCCRD.Services.Data.Areas.HelpPage.ModelDescriptions.ModelDescription"/> generated for a type.
            </summary>
        </member>
        <member name="T:NCCRD.Services.Data.Areas.HelpPage.Models.HelpPageApiModel">
            <summary>
            The model that represents an API displayed on the help page.
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.Models.HelpPageApiModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NCCRD.Services.Data.Areas.HelpPage.Models.HelpPageApiModel"/> class.
            </summary>
        </member>
        <member name="P:NCCRD.Services.Data.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription">
            <summary>
            Gets or sets the <see cref="P:NCCRD.Services.Data.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription"/> that describes the API.
            </summary>
        </member>
        <member name="P:NCCRD.Services.Data.Areas.HelpPage.Models.HelpPageApiModel.UriParameters">
            <summary>
            Gets or sets the <see cref="T:NCCRD.Services.Data.Areas.HelpPage.ModelDescriptions.ParameterDescription"/> collection that describes the URI parameters for the API.
            </summary>
        </member>
        <member name="P:NCCRD.Services.Data.Areas.HelpPage.Models.HelpPageApiModel.RequestDocumentation">
            <summary>
            Gets or sets the documentation for the request.
            </summary>
        </member>
        <member name="P:NCCRD.Services.Data.Areas.HelpPage.Models.HelpPageApiModel.RequestModelDescription">
            <summary>
            Gets or sets the <see cref="T:NCCRD.Services.Data.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the request body.
            </summary>
        </member>
        <member name="P:NCCRD.Services.Data.Areas.HelpPage.Models.HelpPageApiModel.RequestBodyParameters">
            <summary>
            Gets the request body parameter descriptions.
            </summary>
        </member>
        <member name="P:NCCRD.Services.Data.Areas.HelpPage.Models.HelpPageApiModel.ResourceDescription">
            <summary>
            Gets or sets the <see cref="T:NCCRD.Services.Data.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the resource.
            </summary>
        </member>
        <member name="P:NCCRD.Services.Data.Areas.HelpPage.Models.HelpPageApiModel.ResourceProperties">
            <summary>
            Gets the resource property descriptions.
            </summary>
        </member>
        <member name="P:NCCRD.Services.Data.Areas.HelpPage.Models.HelpPageApiModel.SampleRequests">
            <summary>
            Gets the sample requests associated with the API.
            </summary>
        </member>
        <member name="P:NCCRD.Services.Data.Areas.HelpPage.Models.HelpPageApiModel.SampleResponses">
            <summary>
            Gets the sample responses associated with the API.
            </summary>
        </member>
        <member name="P:NCCRD.Services.Data.Areas.HelpPage.Models.HelpPageApiModel.ErrorMessages">
            <summary>
            Gets the error messages associated with this model.
            </summary>
        </member>
        <member name="T:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator">
            <summary>
            This class will generate the samples for the help page.
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator"/> class.
            </summary>
        </member>
        <member name="P:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator.ActualHttpMessageTypes">
            <summary>
            Gets CLR types that are used as the content of <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="P:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples">
            <summary>
            Gets the objects that are used directly as samples for certain actions.
            </summary>
        </member>
        <member name="P:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects">
            <summary>
            Gets the objects that are serialized as samples by the supported formatters.
            </summary>
        </member>
        <member name="P:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories">
            <summary>
            Gets factories for the objects that the supported formatters will serialize as samples. Processed in order,
            stopping when the factory successfully returns a non-<see langref="null"/> object.
            </summary>
            <remarks>
            Collection includes just <see cref="M:NCCRD.Services.Data.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)"/> initially. Use
            <code>SampleObjectFactories.Insert(0, func)</code> to provide an override and
            <code>SampleObjectFactories.Add(func)</code> to provide a fallback.</remarks>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator.GetSampleRequests(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the request body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator.GetSampleResponses(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the response body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator.GetSample(System.Web.Http.Description.ApiDescription,NCCRD.Services.Data.Areas.HelpPage.SampleDirection)">
            <summary>
            Gets the request or response body samples.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator.GetActionSample(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Type,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,NCCRD.Services.Data.Areas.HelpPage.SampleDirection)">
            <summary>
            Search for samples that are provided directly through <see cref="P:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples"/>.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="type">The CLR type.</param>
            <param name="formatter">The formatter.</param>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The sample that matches the parameters.</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator.GetSampleObject(System.Type)">
            <summary>
            Gets the sample object that will be serialized by the formatters. 
            First, it will look at the <see cref="P:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects"/>. If no sample object is found, it will try to create
            one using <see cref="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator.DefaultSampleObjectFactory(NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator,System.Type)"/> (which wraps an <see cref="T:NCCRD.Services.Data.Areas.HelpPage.ObjectGenerator"/>) and other
            factories in <see cref="P:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The sample object.</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator.ResolveHttpRequestMessageType(System.Web.Http.Description.ApiDescription)">
            <summary>
            Resolves the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator.ResolveType(System.Web.Http.Description.ApiDescription,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},NCCRD.Services.Data.Areas.HelpPage.SampleDirection,System.Collections.ObjectModel.Collection{System.Net.Http.Formatting.MediaTypeFormatter}@)">
            <summary>
            Resolves the type of the action parameter or return value when <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/> is used.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or a response.</param>
            <param name="formatters">The formatters.</param>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleGenerator.WriteSampleObjectUsingFormatter(System.Net.Http.Formatting.MediaTypeFormatter,System.Object,System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Writes the sample object using formatter.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="mediaType">Type of the media.</param>
            <returns></returns>
        </member>
        <member name="T:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleKey">
            <summary>
            This is used to identify the place where the sample should be applied.
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Creates a new <see cref="T:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleKey"/> based on media type.
            </summary>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Creates a new <see cref="T:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleKey"/> based on media type and CLR type.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="type">The CLR type.</param>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleKey.#ctor(NCCRD.Services.Data.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleKey"/> based on <see cref="P:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="sampleDirection">The <see cref="P:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,NCCRD.Services.Data.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleKey"/> based on media type, <see cref="P:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The <see cref="P:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="P:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleKey.ControllerName">
            <summary>
            Gets the name of the controller.
            </summary>
            <value>
            The name of the controller.
            </value>
        </member>
        <member name="P:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleKey.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
            <value>
            The name of the action.
            </value>
        </member>
        <member name="P:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleKey.MediaType">
            <summary>
            Gets the media type.
            </summary>
            <value>
            The media type.
            </value>
        </member>
        <member name="P:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleKey.ParameterNames">
            <summary>
            Gets the parameter names.
            </summary>
        </member>
        <member name="P:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleKey.SampleDirection">
            <summary>
            Gets the <see cref="P:NCCRD.Services.Data.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.
            </summary>
        </member>
        <member name="T:NCCRD.Services.Data.Areas.HelpPage.ImageSample">
            <summary>
            This represents an image sample on the help page. There's a display template named ImageSample associated with this class.
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.ImageSample.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NCCRD.Services.Data.Areas.HelpPage.ImageSample"/> class.
            </summary>
            <param name="src">The URL of an image.</param>
        </member>
        <member name="T:NCCRD.Services.Data.Areas.HelpPage.InvalidSample">
            <summary>
            This represents an invalid sample on the help page. There's a display template named InvalidSample associated with this class.
            </summary>
        </member>
        <member name="T:NCCRD.Services.Data.Areas.HelpPage.ObjectGenerator">
            <summary>
            This class will create an object of a given type and populate it with sample data.
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)">
            <summary>
            Generates an object for a given type. The type needs to be public, have a public default constructor and settable public properties/fields. Currently it supports the following types:
            Simple types: <see cref="T:System.Int32"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Uri"/>, etc.
            Complex types: POCO types.
            Nullables: <see cref="T:System.Nullable`1"/>.
            Arrays: arrays of simple types or complex types.
            Key value pairs: <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            Tuples: <see cref="T:System.Tuple`1"/>, <see cref="T:System.Tuple`2"/>, etc
            Dictionaries: <see cref="T:System.Collections.Generic.IDictionary`2"/> or anything deriving from <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            Collections: <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.IList"/>, <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Collections.ICollection"/> or anything deriving from <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Collections.IList"/>.
            Queryables: <see cref="T:System.Linq.IQueryable"/>, <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>An object of the given type.</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Areas.HelpPage.SampleDirection">
            <summary>
            Indicates whether the sample is used for request or response
            </summary>
        </member>
        <member name="T:NCCRD.Services.Data.Areas.HelpPage.TextSample">
            <summary>
            This represents a preformatted text sample on the help page. There's a display template named TextSample associated with this class.
            </summary>
        </member>
        <member name="T:NCCRD.Services.Data.Areas.HelpPage.XmlDocumentationProvider">
            <summary>
            A custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> that reads the API documentation from an XML documentation file.
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Areas.HelpPage.XmlDocumentationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NCCRD.Services.Data.Areas.HelpPage.XmlDocumentationProvider"/> class.
            </summary>
            <param name="documentPath">The physical path to XML document.</param>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.AccessRightsController">
            <summary>
            Manage AccessRights data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AccessRightsController.GetAll">
            <summary>
            Get all AccessRights
            </summary>
            <returns>AccessRights data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AccessRightsController.GetByID(System.Int32)">
            <summary>
            Get AccessRight by Id
            </summary>
            <param name="id">The Id of the AccessRight to get</param>
            <returns>AccessRight data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AccessRightsController.GetByTitle(System.String)">
            <summary>
            Get AccessRight by RoleName
            </summary>
            <param name="roleName">The RoleName of the AccessRight to get</param>
            <returns>AccessRight data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AccessRightsController.Add(NCCRD.Database.Models.AccessRight)">
            <summary>
            Add AccessRight
            </summary>
            <param name="accessRight">The AccessRight to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AccessRightsController.Update(NCCRD.Database.Models.AccessRight)">
            <summary>
            Update AccessRight
            </summary>
            <param name="accessRight">AccessRight to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AccessRightsController.Delete(NCCRD.Database.Models.AccessRight)">
            <summary>
            Delete AccessRight
            </summary>
            <param name="accessRight">AccessRight to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AccessRightsController.DeleteById(System.Int32)">
            <summary>
            Delete AccessRight by Id
            </summary>
            <param name="id">Id of AccessRight to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.AdaptationDetailsController">
            <summary>
            Manage AdaptationDetails data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AdaptationDetailsController.GetAll">
            <summary>
            Get all AdaptationDetails
            </summary>
            <returns>AdaptationDetails data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AdaptationDetailsController.GetByID(System.Int32)">
            <summary>
            Get AdaptationDetail by Id
            </summary>
            <param name="id">The Id of the AdaptationDetail to get</param>
            <returns>AdaptationDetail data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AdaptationDetailsController.Add(NCCRD.Database.Models.AdaptationDetail)">
            <summary>
            Add AdaptationDetail
            </summary>
            <param name="adaptationDetail">The AdaptationDetail to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AdaptationDetailsController.Update(NCCRD.Database.Models.AdaptationDetail)">
            <summary>
            Update AdaptationDetail
            </summary>
            <param name="adaptationDetail">AdaptationDetail to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AdaptationDetailsController.Delete(NCCRD.Database.Models.AdaptationDetail)">
            <summary>
            Delete AdaptationDetail
            </summary>
            <param name="adaptationDetail">AdaptationDetail to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AdaptationDetailsController.DeleteById(System.Int32)">
            <summary>
            Delete AdaptationDetail by Id
            </summary>
            <param name="id">Id of AdaptationDetail to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.AdaptationPurposeController">
            <summary>
            Manage AdaptationPurpose data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AdaptationPurposeController.GetAll">
            <summary>
            Get all AdaptationPurpose
            </summary>
            <returns>AdaptationPurpose data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AdaptationPurposeController.GetByID(System.Int32)">
            <summary>
            Get AdaptationPurpose by Id
            </summary>
            <param name="id">The Id of the AdaptationPurpose to get</param>
            <returns>AdaptationPurpose data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AdaptationPurposeController.Add(NCCRD.Database.Models.AdaptationPurpose)">
            <summary>
            Add AdaptationPurpose
            </summary>
            <param name="adaptationPurpose">The AdaptationPurpose to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AdaptationPurposeController.Update(NCCRD.Database.Models.AdaptationPurpose)">
            <summary>
            Update AdaptationPurpose
            </summary>
            <param name="adaptationPurpose">AdaptationPurpose to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AdaptationPurposeController.Delete(NCCRD.Database.Models.AdaptationPurpose)">
            <summary>
            Delete AdaptationPurpose
            </summary>
            <param name="adaptationPurpose">AdaptationPurpose to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AdaptationPurposeController.DeleteById(System.Int32)">
            <summary>
            Delete AdaptationPurpose by Id
            </summary>
            <param name="id">Id of AdaptationPurpose to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.AppLogController">
            <summary>
            Manage AppLog data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AppLogController.GetAll">
            <summary>
            Get all AppLogs
            </summary>
            <returns>AppLog data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AppLogController.GetByUserId(System.Int32)">
            <summary>
            Get AppLogs UserId
            </summary>
            <param name="userId">UserId to search on</param>
            <returns>AppLog data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AppLogController.GetByUserId(System.Int32,System.Int32)">
            <summary>
            Get AppLogs with date range
            </summary>
            <param name="fromDate">From date. Format: yyyymmdd</param>
            <param name="toDate">To date. Format: yyyymmdd</param>
            <returns>AppLog data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.AppLogController.Add(NCCRD.Database.Models.AppLog)">
            <summary>
            Add AppLog entry
            </summary>
            <param name="appLog">The AppLog entry to add</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.CarbonCreditController">
            <summary>
            Manage CarbonCredit data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CarbonCreditController.GetAll">
            <summary>
            Get all CarbonCredit data
            </summary>
            <returns>CarbonCredit data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CarbonCreditController.GetByID(System.Int32)">
            <summary>
            Get CarbonCredit by Id
            </summary>
            <param name="id">The Id of the CarbonCredit to get</param>
            <returns>CarbonCredit data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CarbonCreditController.Add(NCCRD.Database.Models.CarbonCredit)">
            <summary>
            Add CarbonCredit
            </summary>
            <param name="carbonCredit">The CarbonCredit to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CarbonCreditController.Update(NCCRD.Database.Models.CarbonCredit)">
            <summary>
            Update CarbonCredit
            </summary>
            <param name="carbonCredit">CarbonCredit to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CarbonCreditController.Delete(NCCRD.Database.Models.CarbonCredit)">
            <summary>
            Delete CarbonCredit
            </summary>
            <param name="carbonCredit">CarbonCredit to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CarbonCreditController.DeleteById(System.Int32)">
            <summary>
            Delete CarbonCredit by Id
            </summary>
            <param name="id">Id of CarbonCredit to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.CarbonCreditMarketController">
            <summary>
            Manage CarbonCreditMarket data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CarbonCreditMarketController.GetAll">
            <summary>
            Get all CarbonCreditMarket data
            </summary>
            <returns>CarbonCreditMarket data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CarbonCreditMarketController.GetByID(System.Int32)">
            <summary>
            Get CarbonCreditMarket by Id
            </summary>
            <param name="id">The Id of the CarbonCreditMarket to get</param>
            <returns>CarbonCreditMarket data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CarbonCreditMarketController.Add(NCCRD.Database.Models.CarbonCreditMarket)">
            <summary>
            Add CarbonCreditMarket
            </summary>
            <param name="carbonCreditMarket">The CarbonCreditMarket to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CarbonCreditMarketController.Update(NCCRD.Database.Models.CarbonCreditMarket)">
            <summary>
            Update CarbonCreditMarket
            </summary>
            <param name="carbonCreditMarket">CarbonCreditMarket to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CarbonCreditMarketController.Delete(NCCRD.Database.Models.CarbonCreditMarket)">
            <summary>
            Delete CarbonCreditMarket
            </summary>
            <param name="carbonCreditMarket">CarbonCreditMarket to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CarbonCreditMarketController.DeleteById(System.Int32)">
            <summary>
            Delete CarbonCreditMarket by Id
            </summary>
            <param name="id">Id of CarbonCreditMarket to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.CDMMethodologyController">
            <summary>
            Manage CDMMethodology data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CDMMethodologyController.GetAll">
            <summary>
            Get all CDMMethodology data
            </summary>
            <returns>CDMMethodology data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CDMMethodologyController.GetByID(System.Int32)">
            <summary>
            Get CDMMethodology by Id
            </summary>
            <param name="id">The Id of the CDMMethodology to get</param>
            <returns>CDMMethodology data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CDMMethodologyController.Add(NCCRD.Database.Models.CDMMethodology)">
            <summary>
            Add CDMMethodology
            </summary>
            <param name="cdmMethodology">The CDMMethodology to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CDMMethodologyController.Update(NCCRD.Database.Models.CDMMethodology)">
            <summary>
            Update CDMMethodology
            </summary>
            <param name="cdmMethodology">CDMMethodology to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CDMMethodologyController.Delete(NCCRD.Database.Models.CDMMethodology)">
            <summary>
            Delete CDMMethodology
            </summary>
            <param name="cdmMethodology">CDMMethodology to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CDMMethodologyController.DeleteById(System.Int32)">
            <summary>
            Delete CDMMethodology by Id
            </summary>
            <param name="id">Id of CDMMethodology to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.CDMStatusController">
            <summary>
            Manage CDMStatus data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CDMStatusController.GetAll">
            <summary>
            Get all CDMStatus data
            </summary>
            <returns>CDMStatus data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CDMStatusController.GetByID(System.Int32)">
            <summary>
            Get CDMStatus by Id
            </summary>
            <param name="id">The Id of the CDMStatus to get</param>
            <returns>CDMStatus data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CDMStatusController.Add(NCCRD.Database.Models.CDMStatus)">
            <summary>
            Add CDMStatus
            </summary>
            <param name="cdmStatus">The CDMStatus to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CDMStatusController.Update(NCCRD.Database.Models.CDMStatus)">
            <summary>
            Update CDMStatus
            </summary>
            <param name="cdmStatus">CDMStatus to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CDMStatusController.Delete(NCCRD.Database.Models.CDMStatus)">
            <summary>
            Delete CDMStatus
            </summary>
            <param name="cdmStatus">CDMStatus to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CDMStatusController.DeleteById(System.Int32)">
            <summary>
            Delete CDMStatus by Id
            </summary>
            <param name="id">Id of CDMStatus to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.CountryController">
            <summary>
            Manage Country data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CountryController.GetAll">
            <summary>
            Get all Country data
            </summary>
            <returns>Country data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CountryController.GetByID(System.Int32)">
            <summary>
            Get Country by Id
            </summary>
            <param name="id">The Id of the Country to get</param>
            <returns>Country data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CountryController.Add(NCCRD.Database.Models.Country)">
            <summary>
            Add Country
            </summary>
            <param name="country">The Country to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CountryController.Update(NCCRD.Database.Models.Country)">
            <summary>
            Update Country
            </summary>
            <param name="country">Country to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CountryController.Delete(NCCRD.Database.Models.Country)">
            <summary>
            Delete Country
            </summary>
            <param name="country">Country to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.CountryController.DeleteById(System.Int32)">
            <summary>
            Delete Country by Id
            </summary>
            <param name="id">Id of Country to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.DriversController">
            <summary>
            Manage Drivers data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.DriversController.GetAll">
            <summary>
            Get all Driver data
            </summary>
            <returns>Driver data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.DriversController.GetByID(System.Int32)">
            <summary>
            Get Driver by Id
            </summary>
            <param name="id">The Id of the Driver to get</param>
            <returns>Driver data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.DriversController.Add(NCCRD.Database.Models.Driver)">
            <summary>
            Add Driver
            </summary>
            <param name="driver">The Driver to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.DriversController.Update(NCCRD.Database.Models.Driver)">
            <summary>
            Update Driver
            </summary>
            <param name="driver">Driver to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.DriversController.Delete(NCCRD.Database.Models.Driver)">
            <summary>
            Delete Driver
            </summary>
            <param name="driver">Driver to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.DriversController.DeleteById(System.Int32)">
            <summary>
            Delete Driver by Id
            </summary>
            <param name="id">Id of Driver to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.FeasibilityController">
            <summary>
            Manage Feasibility data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.FeasibilityController.GetAll">
            <summary>
            Get all Feasibility data
            </summary>
            <returns>Feasibility data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.FeasibilityController.GetByID(System.Int32)">
            <summary>
            Get Feasibility by Id
            </summary>
            <param name="id">The Id of the Feasibility to get</param>
            <returns>Feasibility data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.FeasibilityController.Add(NCCRD.Database.Models.Feasibility)">
            <summary>
            Add Feasibility
            </summary>
            <param name="feasibility">The Feasibility to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.FeasibilityController.Update(NCCRD.Database.Models.Feasibility)">
            <summary>
            Update Feasibility
            </summary>
            <param name="feasibility">Feasibility to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.FeasibilityController.Delete(NCCRD.Database.Models.Feasibility)">
            <summary>
            Delete Feasibility
            </summary>
            <param name="feasibility">Feasibility to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.FeasibilityController.DeleteById(System.Int32)">
            <summary>
            Delete Feasibility by Id
            </summary>
            <param name="id">Id of Feasibility to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.FundersController">
            <summary>
            Manage Funder data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.FundersController.GetAll">
            <summary>
            Get all Funder data
            </summary>
            <returns>Funder data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.FundersController.GetByID(System.Int32)">
            <summary>
            Get Funder by Id
            </summary>
            <param name="id">The Id of the Funder to get</param>
            <returns>Funder data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.FundersController.Add(NCCRD.Database.Models.Funder)">
            <summary>
            Add Funder
            </summary>
            <param name="funder">The Funder to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.FundersController.Update(NCCRD.Database.Models.Funder)">
            <summary>
            Update Funder
            </summary>
            <param name="funder">Funder to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.FundersController.Delete(NCCRD.Database.Models.Funder)">
            <summary>
            Delete Funder
            </summary>
            <param name="funder">Funder to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.FundersController.DeleteById(System.Int32)">
            <summary>
            Delete Funder by Id
            </summary>
            <param name="id">Id of Funder to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.FundingStatusController">
            <summary>
            Manage FundingStatus data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.FundingStatusController.GetAll">
            <summary>
            Get all FundingStatus data
            </summary>
            <returns>FundingStatus data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.FundingStatusController.GetByID(System.Int32)">
            <summary>
            Get FundingStatus by Id
            </summary>
            <param name="id">The Id of the FundingStatus to get</param>
            <returns>FundingStatus data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.FundingStatusController.Add(NCCRD.Database.Models.FundingStatus)">
            <summary>
            Add FundingStatus
            </summary>
            <param name="fundingStatus">The FundingStatus to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.FundingStatusController.Update(NCCRD.Database.Models.FundingStatus)">
            <summary>
            Update FundingStatus
            </summary>
            <param name="fundingStatus">FundingStatus to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.FundingStatusController.Delete(NCCRD.Database.Models.FundingStatus)">
            <summary>
            Delete FundingStatus
            </summary>
            <param name="fundingStatus">FundingStatus to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.FundingStatusController.DeleteById(System.Int32)">
            <summary>
            Delete FundingStatus by Id
            </summary>
            <param name="id">Id of FundingStatus to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.HazardsController">
            <summary>
            Manage Hazards data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.HazardsController.GetAll">
            <summary>
            Get all Hazard data
            </summary>
            <returns>Hazard data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.HazardsController.GetByID(System.Int32)">
            <summary>
            Get Hazard by Id
            </summary>
            <param name="id">The Id of the Hazard to get</param>
            <returns>Hazard data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.HazardsController.Add(NCCRD.Database.Models.Hazard)">
            <summary>
            Add Hazard
            </summary>
            <param name="hazard">The Hazard to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.HazardsController.Update(NCCRD.Database.Models.Hazard)">
            <summary>
            Update Hazard
            </summary>
            <param name="hazard">Hazard to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.HazardsController.Delete(NCCRD.Database.Models.Hazard)">
            <summary>
            Delete Hazard
            </summary>
            <param name="hazard">Hazard to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.HazardsController.DeleteById(System.Int32)">
            <summary>
            Delete Hazard by Id
            </summary>
            <param name="id">Id of Hazard to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.LocationController">
            <summary>
            Manage Location data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.LocationController.GetAll">
            <summary>
            Get all Location data
            </summary>
            <returns>Location data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.LocationController.GetByID(System.Int32)">
            <summary>
            Get Location by Id
            </summary>
            <param name="id">The Id of the Location to get</param>
            <returns>Location data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.LocationController.Add(NCCRD.Database.Models.Location)">
            <summary>
            Add Location
            </summary>
            <param name="location">The Location to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.LocationController.Update(NCCRD.Database.Models.Location)">
            <summary>
            Update Location
            </summary>
            <param name="location">Location to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.LocationController.Delete(NCCRD.Database.Models.Location)">
            <summary>
            Delete Location
            </summary>
            <param name="location">Location to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.LocationController.DeleteById(System.Int32)">
            <summary>
            Delete Location by Id
            </summary>
            <param name="id">Id of Location to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.LocationTypeController">
            <summary>
            Manage LocationType data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.LocationTypeController.GetAll">
            <summary>
            Get all LocationType data
            </summary>
            <returns>LocationType data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.LocationTypeController.GetByID(System.Int32)">
            <summary>
            Get LocationType by Id
            </summary>
            <param name="id">The Id of the LocationType to get</param>
            <returns>LocationType data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.LocationTypeController.Add(NCCRD.Database.Models.LocationType)">
            <summary>
            Add LocationType
            </summary>
            <param name="locationType">The LocationType to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.LocationTypeController.Update(NCCRD.Database.Models.LocationType)">
            <summary>
            Update LocationType
            </summary>
            <param name="locationType">LocationType to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.LocationTypeController.Delete(NCCRD.Database.Models.LocationType)">
            <summary>
            Delete LocationType
            </summary>
            <param name="locationType">LocationType to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.LocationTypeController.DeleteById(System.Int32)">
            <summary>
            Delete LocationType by Id
            </summary>
            <param name="id">Id of LocationType to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.MAOptionsController">
            <summary>
            Manage MAOptions data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.MAOptionsController.GetAll">
            <summary>
            Get all MAOptions data
            </summary>
            <returns>MAOptions data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.MAOptionsController.GetByID(System.Int32)">
            <summary>
            Get MAOption by Id
            </summary>
            <param name="id">The Id of the MAOption to get</param>
            <returns>MAOption data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.MAOptionsController.Add(NCCRD.Database.Models.MAOption)">
            <summary>
            Add MAOption
            </summary>
            <param name="maOption">The MAOption to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.MAOptionsController.Update(NCCRD.Database.Models.MAOption)">
            <summary>
            Update MAOption
            </summary>
            <param name="maOption">MAOption to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.MAOptionsController.Delete(NCCRD.Database.Models.MAOption)">
            <summary>
            Delete MAOption
            </summary>
            <param name="maOption">MAOption to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.MAOptionsController.DeleteById(System.Int32)">
            <summary>
            Delete MAOption by Id
            </summary>
            <param name="id">Id of MAOption to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.MitigationDetailsController">
            <summary>
            Manage MitigationDetails data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.MitigationDetailsController.GetAll">
            <summary>
            Get all MitigationDetails data
            </summary>
            <returns>MitigationDetails data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.MitigationDetailsController.GetByID(System.Int32)">
            <summary>
            Get MitigationDetails by Id
            </summary>
            <param name="id">The Id of the MitigationDetails to get</param>
            <returns>MitigationDetails data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.MitigationDetailsController.GetByProjectID(System.Int32)">
            <summary>
            Get MitigationDetails by ProjectId
            </summary>
            <param name="projectId">The ProjectId of the MitigationDetails to get</param>
            <returns>MitigationDetails data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.MitigationDetailsController.Add(NCCRD.Database.Models.MitigationDetail)">
            <summary>
            Add MitigationDetails
            </summary>
            <param name="mitigationDetails">The MitigationDetails to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.MitigationDetailsController.Update(NCCRD.Database.Models.MitigationDetail)">
            <summary>
            Update MitigationDetails
            </summary>
            <param name="mitigationDetails">MitigationDetails to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.MitigationDetailsController.Delete(NCCRD.Database.Models.MitigationDetail)">
            <summary>
            Delete MitigationDetails
            </summary>
            <param name="mitigationDetails">MitigationDetails to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.MitigationDetailsController.DeleteById(System.Int32)">
            <summary>
            Delete MitigationDetails by Id
            </summary>
            <param name="id">Id of MitigationDetails to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.MitigationEmissionsDataController">
            <summary>
            Manage MitigationEmissions data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.MitigationEmissionsDataController.GetAll">
            <summary>
            Get all MitigationEmissionsData data
            </summary>
            <returns>MitigationEmissionsData data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.MitigationEmissionsDataController.GetByID(System.Int32)">
            <summary>
            Get MitigationEmissionsData by Id
            </summary>
            <param name="id">The Id of the MitigationEmissionsData to get</param>
            <returns>MitigationEmissionsData data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.MitigationEmissionsDataController.GetByProjectID(System.Int32)">
            <summary>
            Get MitigationEmissionsData by ProjectId
            </summary>
            <param name="projectId">The ProjectId of the MitigationEmissionsData to get</param>
            <returns>MitigationEmissionsData data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.MitigationEmissionsDataController.Add(NCCRD.Database.Models.MitigationEmissionsData)">
            <summary>
            Add MitigationEmissionsData
            </summary>
            <param name="mitigationEmissionsData">The MitigationEmissionsData to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.MitigationEmissionsDataController.Update(NCCRD.Database.Models.MitigationEmissionsData)">
            <summary>
            Update MitigationEmissionsData
            </summary>
            <param name="mitigationEmissionsData">MitigationEmissionsData to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.MitigationEmissionsDataController.Delete(NCCRD.Database.Models.MitigationEmissionsData)">
            <summary>
            Delete MitigationEmissionsData
            </summary>
            <param name="mitigationEmissionsData">MitigationEmissionsData to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.MitigationEmissionsDataController.DeleteById(System.Int32)">
            <summary>
            Delete MitigationEmissionsData by Id
            </summary>
            <param name="id">Id of MitigationEmissionsData to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.OptionFunderController">
            <summary>
            Manage OptionFunder data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.OptionFunderController.GetAll">
            <summary>
            Get all OptionFunder data
            </summary>
            <returns>OptionFunder data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.OptionFunderController.GetByID(System.Int32)">
            <summary>
            Get OptionFunder by Id
            </summary>
            <param name="id">The Id of the OptionFunder to get</param>
            <returns>OptionFunder data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.OptionFunderController.Add(NCCRD.Database.Models.OptionFunder)">
            <summary>
            Add OptionFunder
            </summary>
            <param name="optionFunder">The OptionFunder to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.OptionFunderController.Update(NCCRD.Database.Models.OptionFunder)">
            <summary>
            Update OptionFunder
            </summary>
            <param name="optionFunder">OptionFunder to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.OptionFunderController.Delete(NCCRD.Database.Models.OptionFunder)">
            <summary>
            Delete OptionFunder
            </summary>
            <param name="optionFunder">OptionFunder to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.OptionFunderController.DeleteById(System.Int32)">
            <summary>
            Delete OptionFunder by Id
            </summary>
            <param name="id">Id of OptionFunder to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.OptionRegionController">
            <summary>
            Manage OptionRegion data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.OptionRegionController.GetAll">
            <summary>
            Get all OptionRegion data
            </summary>
            <returns>OptionRegion data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.OptionRegionController.GetByID(System.Int32)">
            <summary>
            Get OptionRegion by Id
            </summary>
            <param name="id">The Id of the OptionRegion to get</param>
            <returns>OptionRegion data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.OptionRegionController.Add(NCCRD.Database.Models.OptionRegion)">
            <summary>
            Add OptionRegion
            </summary>
            <param name="optionRegion">The OptionRegion to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.OptionRegionController.Update(NCCRD.Database.Models.OptionRegion)">
            <summary>
            Update OptionRegion
            </summary>
            <param name="optionRegion">OptionRegion to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.OptionRegionController.Delete(NCCRD.Database.Models.OptionRegion)">
            <summary>
            Delete OptionRegion
            </summary>
            <param name="optionRegion">OptionRegion to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.OptionRegionController.DeleteById(System.Int32)">
            <summary>
            Delete OptionRegion by Id
            </summary>
            <param name="id">Id of OptionRegion to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.ProjectFunderController">
            <summary>
            Manage ProjectFunder data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectFunderController.GetAll">
            <summary>
            Get all ProjectFunder data
            </summary>
            <returns>ProjectFunder data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectFunderController.GetByID(System.Int32)">
            <summary>
            Get ProjectFunder by Id
            </summary>
            <param name="id">The Id of the ProjectFunder to get</param>
            <returns>ProjectFunder data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectFunderController.GetByProjectID(System.Int32)">
            <summary>
            Get ProjectFunder by ProjectId
            </summary>
            <param name="projectId">The ProjectId of the ProjectFunder to get</param>
            <returns>ProjectFunder data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectFunderController.Add(NCCRD.Database.Models.ProjectFunder)">
            <summary>
            Add ProjectFunder
            </summary>
            <param name="projectFunder">The ProjectFunder to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectFunderController.Update(NCCRD.Database.Models.ProjectFunder)">
            <summary>
            Update ProjectFunder
            </summary>
            <param name="projectFunder">ProjectFunder to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectFunderController.Delete(NCCRD.Database.Models.ProjectFunder)">
            <summary>
            Delete ProjectFunder
            </summary>
            <param name="projectFunder">ProjectFunder to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectFunderController.DeleteById(System.Int32)">
            <summary>
            Delete ProjectFunder by Id
            </summary>
            <param name="id">Id of ProjectFunder to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.ProjectLocationController">
            <summary>
            Manage ProjectLocation data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectLocationController.GetAll">
            <summary>
            Get all ProjectLocation data
            </summary>
            <returns>ProjectLocation data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectLocationController.GetByID(System.Int32)">
            <summary>
            Get ProjectLocation by Id
            </summary>
            <param name="id">The Id of the ProjectLocation to get</param>
            <returns>ProjectLocation data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectLocationController.GetByProjectID(System.Int32)">
            <summary>
            Get ProjectLocation by ProjectId
            </summary>
            <param name="projectId">The ProjectId of the ProjectLocation to get</param>
            <returns>ProjectLocation data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectLocationController.Add(NCCRD.Database.Models.ProjectLocation)">
            <summary>
            Add ProjectLocation
            </summary>
            <param name="projectLocation">The ProjectLocation to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectLocationController.Update(NCCRD.Database.Models.ProjectLocation)">
            <summary>
            Update ProjectLocation
            </summary>
            <param name="projectLocation">ProjectLocation to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectLocationController.Delete(NCCRD.Database.Models.ProjectLocation)">
            <summary>
            Delete ProjectLocation
            </summary>
            <param name="projectLocation">ProjectLocation to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectLocationController.DeleteById(System.Int32)">
            <summary>
            Delete ProjectLocation by Id
            </summary>
            <param name="id">Id of ProjectLocation to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.ProjectRegionController">
            <summary>
            Manage ProjectRegion data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectRegionController.GetAll">
            <summary>
            Get all ProjectRegion data
            </summary>
            <returns>ProjectRegion data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectRegionController.GetByID(System.Int32)">
            <summary>
            Get ProjectRegion by Id
            </summary>
            <param name="id">The Id of the ProjectRegion to get</param>
            <returns>ProjectRegion data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectRegionController.GetByProjectID(System.Int32)">
            <summary>
            Get ProjectRegion by ProjectId
            </summary>
            <param name="projectId">The ProjectId of the ProjectRegion to get</param>
            <returns>ProjectRegion data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectRegionController.Add(NCCRD.Database.Models.ProjectRegion)">
            <summary>
            Add ProjectRegion
            </summary>
            <param name="projectRegion">The ProjectRegion to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectRegionController.Update(NCCRD.Database.Models.ProjectRegion)">
            <summary>
            Update ProjectRegion
            </summary>
            <param name="projectRegion">ProjectRegion to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectRegionController.Delete(NCCRD.Database.Models.ProjectRegion)">
            <summary>
            Delete ProjectRegion
            </summary>
            <param name="projectRegion">ProjectRegion to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectRegionController.DeleteById(System.Int32)">
            <summary>
            Delete ProjectRegion by Id
            </summary>
            <param name="id">Id of ProjectRegion to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.ProjectsController">
            <summary>
            Manage Project data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectsController.GetAll">
            <summary>
            Get all Projects
            </summary>
            <returns>Projects data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectsController.GetByID(System.Int32)">
            <summary>
            Get Project by Id
            </summary>
            <param name="id">The Id of the Project to get</param>
            <returns>Project data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectsController.GetByTitle(System.String)">
            <summary>
            Get Project by Title
            </summary>
            <param name="title">The Title of the Project to get</param>
            <returns>Project data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectsController.Add(NCCRD.Database.Models.Project)">
            <summary>
            Add Project
            </summary>
            <param name="project">The Project to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectsController.Update(NCCRD.Database.Models.Project)">
            <summary>
            Update Project
            </summary>
            <param name="project">Project to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectsController.Delete(NCCRD.Database.Models.Project)">
            <summary>
            Delete Project
            </summary>
            <param name="project">Project to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectsController.DeleteById(System.Int32)">
            <summary>
            Delete Project by Id
            </summary>
            <param name="id">Id of Project to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectsController.DeleteByTitle(System.String)">
            <summary>
            Delete Project by Title
            </summary>
            <param name="title">Title of Project to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.ProjectStatusController">
            <summary>
            Manage ProjectStatus data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectStatusController.GetAll">
            <summary>
            Get all ProjectStatus data
            </summary>
            <returns>ProjectStatus data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectStatusController.GetByID(System.Int32)">
            <summary>
            Get ProjectStatus by Id
            </summary>
            <param name="id">The Id of the ProjectStatus to get</param>
            <returns>ProjectStatus data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectStatusController.Add(NCCRD.Database.Models.ProjectStatus)">
            <summary>
            Add ProjectStatus
            </summary>
            <param name="projectStatus">The ProjectStatus to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectStatusController.Update(NCCRD.Database.Models.ProjectStatus)">
            <summary>
            Update ProjectStatus
            </summary>
            <param name="projectStatus">ProjectStatus to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectStatusController.Delete(NCCRD.Database.Models.ProjectStatus)">
            <summary>
            Delete ProjectStatus
            </summary>
            <param name="projectStatus">ProjectStatus to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectStatusController.DeleteById(System.Int32)">
            <summary>
            Delete ProjectStatus by Id
            </summary>
            <param name="id">Id of ProjectStatus to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.ProjectSubTypeController">
            <summary>
            Manage ProjectSubType data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectSubTypeController.GetAll">
            <summary>
            Get all ProjectSubType data
            </summary>
            <returns>ProjectSubType data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectSubTypeController.GetByID(System.Int32)">
            <summary>
            Get ProjectSubType by Id
            </summary>
            <param name="id">The Id of the ProjectSubType to get</param>
            <returns>ProjectSubType data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectSubTypeController.GetByProjectTypeID(System.Int32)">
            <summary>
            Get ProjectSubType by ProjectTypeId
            </summary>
            <param name="projectTypeId">The ProjectTypeId of the ProjectSubType to get</param>
            <returns>ProjectSubType data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectSubTypeController.Add(NCCRD.Database.Models.ProjectSubType)">
            <summary>
            Add ProjectSubType
            </summary>
            <param name="projectSubType">The ProjectSubType to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectSubTypeController.Update(NCCRD.Database.Models.ProjectSubType)">
            <summary>
            Update ProjectSubType
            </summary>
            <param name="projectSubType">ProjectSubType to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectSubTypeController.Delete(NCCRD.Database.Models.ProjectSubType)">
            <summary>
            Delete ProjectSubType
            </summary>
            <param name="projectSubType">ProjectSubType to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectSubTypeController.DeleteById(System.Int32)">
            <summary>
            Delete ProjectSubType by Id
            </summary>
            <param name="id">Id of ProjectSubType to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.ProjectTypeController">
            <summary>
            Manage ProjectType data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectTypeController.GetAll">
            <summary>
            Get all ProjectType data
            </summary>
            <returns>ProjectType data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectTypeController.GetByID(System.Int32)">
            <summary>
            Get ProjectType by Id
            </summary>
            <param name="id">The Id of the ProjectType to get</param>
            <returns>ProjectType data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectTypeController.Add(NCCRD.Database.Models.ProjectType)">
            <summary>
            Add ProjectType
            </summary>
            <param name="projectType">The ProjectType to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectTypeController.Update(NCCRD.Database.Models.ProjectType)">
            <summary>
            Update ProjectType
            </summary>
            <param name="projectType">ProjectType to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectTypeController.Delete(NCCRD.Database.Models.ProjectType)">
            <summary>
            Delete ProjectType
            </summary>
            <param name="projectType">ProjectType to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectTypeController.DeleteById(System.Int32)">
            <summary>
            Delete ProjectType by Id
            </summary>
            <param name="id">Id of ProjectType to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.ProjectTypologyController">
            <summary>
            Manage ProjectTypology data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectTypologyController.GetAll">
            <summary>
            Get all ProjectTypology data
            </summary>
            <returns>ProjectTypology data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectTypologyController.GetByID(System.Int32)">
            <summary>
            Get ProjectTypology by Id
            </summary>
            <param name="id">The Id of the ProjectTypology to get</param>
            <returns>ProjectTypology data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectTypologyController.GetByProjectID(System.Int32)">
            <summary>
            Get ProjectTypology by ProjectId
            </summary>
            <param name="projectId">The ProjectId of the ProjectTypology to get</param>
            <returns>ProjectTypology data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectTypologyController.Add(NCCRD.Database.Models.ProjectTypology)">
            <summary>
            Add ProjectTypology
            </summary>
            <param name="projectTypology">The ProjectTypology to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectTypologyController.Update(NCCRD.Database.Models.ProjectTypology)">
            <summary>
            Update ProjectTypology
            </summary>
            <param name="projectTypology">ProjectTypology to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectTypologyController.Delete(NCCRD.Database.Models.ProjectTypology)">
            <summary>
            Delete ProjectTypology
            </summary>
            <param name="projectTypology">ProjectTypology to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ProjectTypologyController.DeleteById(System.Int32)">
            <summary>
            Delete ProjectTypology by Id
            </summary>
            <param name="id">Id of ProjectTypology to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.RegionController">
            <summary>
            Manage Region data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.RegionController.GetAll">
            <summary>
            Get all Region data
            </summary>
            <returns>Region data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.RegionController.GetByID(System.Int32)">
            <summary>
            Get Region by Id
            </summary>
            <param name="id">The Id of the Region to get</param>
            <returns>Region data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.RegionController.Add(NCCRD.Database.Models.Region)">
            <summary>
            Add Region
            </summary>
            <param name="region">The Region to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.RegionController.Update(NCCRD.Database.Models.Region)">
            <summary>
            Update Region
            </summary>
            <param name="region">Region to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.RegionController.Delete(NCCRD.Database.Models.Region)">
            <summary>
            Delete Region
            </summary>
            <param name="region">Region to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.RegionController.DeleteById(System.Int32)">
            <summary>
            Delete Region by Id
            </summary>
            <param name="id">Id of Region to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.ResearchDetailsController">
            <summary>
            Manage ResearchDetails data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ResearchDetailsController.GetAll">
            <summary>
            Get all ResearchDetails data
            </summary>
            <returns>ResearchDetails data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ResearchDetailsController.GetByID(System.Int32)">
            <summary>
            Get ResearchDetails by Id
            </summary>
            <param name="id">The Id of the ResearchDetails to get</param>
            <returns>ResearchDetails data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ResearchDetailsController.GetByProjectID(System.Int32)">
            <summary>
            Get ResearchDetails by ProjectId
            </summary>
            <param name="projectId">The ProjectId of the ResearchDetails to get</param>
            <returns>ResearchDetails data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ResearchDetailsController.Add(NCCRD.Database.Models.ResearchDetail)">
            <summary>
            Add ResearchDetails
            </summary>
            <param name="researchDetails">The ResearchDetails to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ResearchDetailsController.Update(NCCRD.Database.Models.ResearchDetail)">
            <summary>
            Update ResearchDetails
            </summary>
            <param name="researchDetails">ResearchDetails to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ResearchDetailsController.Delete(NCCRD.Database.Models.ResearchDetail)">
            <summary>
            Delete ResearchDetails
            </summary>
            <param name="researchDetails">ResearchDetails to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ResearchDetailsController.DeleteById(System.Int32)">
            <summary>
            Delete ResearchDetails by Id
            </summary>
            <param name="id">Id of ResearchDetails to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.ResearchTypeController">
            <summary>
            Manage ResearchType data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ResearchTypeController.GetAll">
            <summary>
            Get all ResearchType data
            </summary>
            <returns>ResearchType data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ResearchTypeController.GetByID(System.Int32)">
            <summary>
            Get ResearchType by Id
            </summary>
            <param name="id">The Id of the ResearchType to get</param>
            <returns>ResearchType data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ResearchTypeController.Add(NCCRD.Database.Models.ResearchType)">
            <summary>
            Add ResearchType
            </summary>
            <param name="researchType">The ResearchType to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ResearchTypeController.Update(NCCRD.Database.Models.ResearchType)">
            <summary>
            Update ResearchType
            </summary>
            <param name="researchType">ResearchType to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ResearchTypeController.Delete(NCCRD.Database.Models.ResearchType)">
            <summary>
            Delete ResearchType
            </summary>
            <param name="researchType">ResearchType to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ResearchTypeController.DeleteById(System.Int32)">
            <summary>
            Delete ResearchType by Id
            </summary>
            <param name="id">Id of ResearchType to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.SectorController">
            <summary>
            Manage Sector data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.SectorController.GetAll">
            <summary>
            Get all Sector data
            </summary>
            <returns>Sector data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.SectorController.GetByID(System.Int32)">
            <summary>
            Get Sector by Id
            </summary>
            <param name="id">The Id of the Sector to get</param>
            <returns>Sector data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.SectorController.Add(NCCRD.Database.Models.Sector)">
            <summary>
            Add Sector
            </summary>
            <param name="sector">The Sector to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.SectorController.Update(NCCRD.Database.Models.Sector)">
            <summary>
            Update Sector
            </summary>
            <param name="sector">Sector to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.SectorController.Delete(NCCRD.Database.Models.Sector)">
            <summary>
            Delete Sector
            </summary>
            <param name="sector">Sector to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.SectorController.DeleteById(System.Int32)">
            <summary>
            Delete Sector by Id
            </summary>
            <param name="id">Id of Sector to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.SectorTypeController">
            <summary>
            Manage SectorType data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.SectorTypeController.GetAll">
            <summary>
            Get all SectorType data
            </summary>
            <returns>SectorType data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.SectorTypeController.GetByID(System.Int32)">
            <summary>
            Get SectorType by Id
            </summary>
            <param name="id">The Id of the SectorType to get</param>
            <returns>SectorType data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.SectorTypeController.Add(NCCRD.Database.Models.SectorType)">
            <summary>
            Add SectorType
            </summary>
            <param name="sectorType">The SectorType to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.SectorTypeController.Update(NCCRD.Database.Models.SectorType)">
            <summary>
            Update SectorType
            </summary>
            <param name="sectorType">SectorType to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.SectorTypeController.Delete(NCCRD.Database.Models.SectorType)">
            <summary>
            Delete SectorType
            </summary>
            <param name="sectorType">SectorType to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.SectorTypeController.DeleteById(System.Int32)">
            <summary>
            Delete SectorType by Id
            </summary>
            <param name="id">Id of SectorType to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.SitePagesController">
            <summary>
            Manage SitePages data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.SitePagesController.GetAll">
            <summary>
            Get all SitePage data
            </summary>
            <returns>SitePage data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.SitePagesController.GetByID(System.Int32)">
            <summary>
            Get SitePage by Id
            </summary>
            <param name="id">The Id of the SitePage to get</param>
            <returns>SitePage data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.SitePagesController.Add(NCCRD.Database.Models.SitePage)">
            <summary>
            Add SitePage
            </summary>
            <param name="sitePages">The SitePage to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.SitePagesController.Update(NCCRD.Database.Models.SitePage)">
            <summary>
            Update SitePage
            </summary>
            <param name="sitePage">SitePage to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.SitePagesController.Delete(NCCRD.Database.Models.SitePage)">
            <summary>
            Delete SitePage
            </summary>
            <param name="sitePage">SitePage to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.SitePagesController.DeleteById(System.Int32)">
            <summary>
            Delete SitePage by Id
            </summary>
            <param name="id">Id of SitePage to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.StocksController">
            <summary>
            Manage Stocks data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.StocksController.GetAll">
            <summary>
            Get all Stock data
            </summary>
            <returns>Stock data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.StocksController.GetByID(System.Int32)">
            <summary>
            Get Stock by Id
            </summary>
            <param name="id">The Id of the Stock to get</param>
            <returns>Stock data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.StocksController.Add(NCCRD.Database.Models.Stock)">
            <summary>
            Add Stock
            </summary>
            <param name="stock">The Stock to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.StocksController.Update(NCCRD.Database.Models.Stock)">
            <summary>
            Update Stock
            </summary>
            <param name="stock">Stock to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.StocksController.Delete(NCCRD.Database.Models.Stock)">
            <summary>
            Delete Stock
            </summary>
            <param name="stock">Stock to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.StocksController.DeleteById(System.Int32)">
            <summary>
            Delete Stock by Id
            </summary>
            <param name="id">Id of Stock to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.TargetAudienceController">
            <summary>
            Manage TargetAudience data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.TargetAudienceController.GetAll">
            <summary>
            Get all TargetAudience data
            </summary>
            <returns>TargetAudience data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.TargetAudienceController.GetByID(System.Int32)">
            <summary>
            Get TargetAudience by Id
            </summary>
            <param name="id">The Id of the TargetAudience to get</param>
            <returns>TargetAudience data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.TargetAudienceController.Add(NCCRD.Database.Models.TargetAudience)">
            <summary>
            Add TargetAudience
            </summary>
            <param name="targetAudience">The TargetAudience to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.TargetAudienceController.Update(NCCRD.Database.Models.TargetAudience)">
            <summary>
            Update TargetAudience
            </summary>
            <param name="targetAudience">TargetAudience to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.TargetAudienceController.Delete(NCCRD.Database.Models.TargetAudience)">
            <summary>
            Delete TargetAudience
            </summary>
            <param name="targetAudience">TargetAudience to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.TargetAudienceController.DeleteById(System.Int32)">
            <summary>
            Delete TargetAudience by Id
            </summary>
            <param name="id">Id of TargetAudience to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.TitleController">
            <summary>
            Manage Title data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.TitleController.GetAll">
            <summary>
            Get all Title data
            </summary>
            <returns>Title data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.TitleController.GetByID(System.Int32)">
            <summary>
            Get Title by Id
            </summary>
            <param name="id">The Id of the Title to get</param>
            <returns>Title data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.TitleController.Add(NCCRD.Database.Models.Title)">
            <summary>
            Add Title
            </summary>
            <param name="title">The Title to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.TitleController.Update(NCCRD.Database.Models.Title)">
            <summary>
            Update Title
            </summary>
            <param name="title">Title to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.TitleController.Delete(NCCRD.Database.Models.Title)">
            <summary>
            Delete Title
            </summary>
            <param name="title">Title to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.TitleController.DeleteById(System.Int32)">
            <summary>
            Delete Title by Id
            </summary>
            <param name="id">Id of Title to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.TypologyController">
            <summary>
            Manage Typology data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.TypologyController.GetAll">
            <summary>
            Get all Typology data
            </summary>
            <returns>Typology data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.TypologyController.GetByID(System.Int32)">
            <summary>
            Get Typology by Id
            </summary>
            <param name="id">The Id of the Typology to get</param>
            <returns>Typology data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.TypologyController.Add(NCCRD.Database.Models.Typology)">
            <summary>
            Add Typology
            </summary>
            <param name="typology">The Typology to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.TypologyController.Update(NCCRD.Database.Models.Typology)">
            <summary>
            Update Typology
            </summary>
            <param name="typology">Typology to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.TypologyController.Delete(NCCRD.Database.Models.Typology)">
            <summary>
            Delete Typology
            </summary>
            <param name="typology">Typology to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.TypologyController.DeleteById(System.Int32)">
            <summary>
            Delete Typology by Id
            </summary>
            <param name="id">Id of Typology to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.UserRolesController">
            <summary>
            Manage UserRoles data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.UserRolesController.GetAll">
            <summary>
            Get all UserRole data
            </summary>
            <returns>UserRole data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.UserRolesController.GetByID(System.Int32)">
            <summary>
            Get UserRole by Id
            </summary>
            <param name="id">The Id of the UserRole to get</param>
            <returns>UserRole data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.UserRolesController.Add(NCCRD.Database.Models.UserRole)">
            <summary>
            Add UserRole
            </summary>
            <param name="userRole">The UserRole to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.UserRolesController.Update(NCCRD.Database.Models.UserRole)">
            <summary>
            Update UserRole
            </summary>
            <param name="userRole">UserRole to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.UserRolesController.Delete(NCCRD.Database.Models.UserRole)">
            <summary>
            Delete UserRole
            </summary>
            <param name="userRole">UserRole to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.UserRolesController.DeleteById(System.Int32)">
            <summary>
            Delete UserRole by Id
            </summary>
            <param name="id">Id of UserRole to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.UsersController">
            <summary>
            Manage Users data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.UsersController.GetAll">
            <summary>
            Get all User data
            </summary>
            <returns>User data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.UsersController.GetByID(System.Int32)">
            <summary>
            Get User by Id
            </summary>
            <param name="id">The Id of the User to get</param>
            <returns>User data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.UsersController.Add(NCCRD.Database.Models.User)">
            <summary>
            Add User
            </summary>
            <param name="user">The User to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.UsersController.Update(NCCRD.Database.Models.User)">
            <summary>
            Update User
            </summary>
            <param name="user">User to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.UsersController.Delete(NCCRD.Database.Models.User)">
            <summary>
            Delete User
            </summary>
            <param name="user">User to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.UsersController.DeleteById(System.Int32)">
            <summary>
            Delete User by Id
            </summary>
            <param name="id">Id of User to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.ValidationStatusController">
            <summary>
            Manage ValidationStatus data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ValidationStatusController.GetAll">
            <summary>
            Get all ValidationStatus data
            </summary>
            <returns>ValidationStatus data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ValidationStatusController.GetByID(System.Int32)">
            <summary>
            Get ValidationStatus by Id
            </summary>
            <param name="id">The Id of the ValidationStatus to get</param>
            <returns>ValidationStatus data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ValidationStatusController.Add(NCCRD.Database.Models.ValidationStatus)">
            <summary>
            Add ValidationStatus
            </summary>
            <param name="validationStatus">The ValidationStatus to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ValidationStatusController.Update(NCCRD.Database.Models.ValidationStatus)">
            <summary>
            Update ValidationStatus
            </summary>
            <param name="validationStatus">ValidationStatus to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ValidationStatusController.Delete(NCCRD.Database.Models.ValidationStatus)">
            <summary>
            Delete ValidationStatus
            </summary>
            <param name="validationStatus">ValidationStatus to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.ValidationStatusController.DeleteById(System.Int32)">
            <summary>
            Delete ValidationStatus by Id
            </summary>
            <param name="id">Id of ValidationStatus to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.VersionHistoryController">
            <summary>
            Access VersionHistory data 
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.VersionHistoryController.GetAll">
            <summary>
            Get all VersionHistory data
            </summary>
            <returns>VersionHistory data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.VersionHistoryController.GetLatest">
            <summary>
            Get latest VersionHistory entry
            </summary>
            <returns>VersionHistory data as JSON</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.VoluntaryGoldStandardController">
            <summary>
            Manage VoluntaryGoldStandard data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.VoluntaryGoldStandardController.GetAll">
            <summary>
            Get all VoluntaryGoldStandard data
            </summary>
            <returns>VoluntaryGoldStandard data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.VoluntaryGoldStandardController.GetByID(System.Int32)">
            <summary>
            Get VoluntaryGoldStandard by Id
            </summary>
            <param name="id">The Id of the VoluntaryGoldStandard to get</param>
            <returns>VoluntaryGoldStandard data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.VoluntaryGoldStandardController.Add(NCCRD.Database.Models.VoluntaryGoldStandard)">
            <summary>
            Add VoluntaryGoldStandard
            </summary>
            <param name="voluntaryGoldStandard">The VoluntaryGoldStandard to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.VoluntaryGoldStandardController.Update(NCCRD.Database.Models.VoluntaryGoldStandard)">
            <summary>
            Update VoluntaryGoldStandard
            </summary>
            <param name="voluntaryGoldStandard">VoluntaryGoldStandard to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.VoluntaryGoldStandardController.Delete(NCCRD.Database.Models.VoluntaryGoldStandard)">
            <summary>
            Delete VoluntaryGoldStandard
            </summary>
            <param name="voluntaryGoldStandard">VoluntaryGoldStandard to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.VoluntaryGoldStandardController.DeleteById(System.Int32)">
            <summary>
            Delete VoluntaryGoldStandard by Id
            </summary>
            <param name="id">Id of VoluntaryGoldStandard to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="T:NCCRD.Services.Data.Controllers.VoluntaryMethodologyController">
            <summary>
            Manage VoluntaryMethodology data
            </summary>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.VoluntaryMethodologyController.GetAll">
            <summary>
            Get all VoluntaryMethodology data
            </summary>
            <returns>VoluntaryMethodology data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.VoluntaryMethodologyController.GetByID(System.Int32)">
            <summary>
            Get VoluntaryGoldStandard by Id
            </summary>
            <param name="id">The Id of the VoluntaryMethodology to get</param>
            <returns>VoluntaryMethodology data as JSON</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.VoluntaryMethodologyController.Add(NCCRD.Database.Models.VoluntaryMethodology)">
            <summary>
            Add VoluntaryMethodology
            </summary>
            <param name="voluntaryMethodology">The VoluntaryMethodology to add</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.VoluntaryMethodologyController.Update(NCCRD.Database.Models.VoluntaryMethodology)">
            <summary>
            Update VoluntaryMethodology
            </summary>
            <param name="voluntaryMethodology">VoluntaryMethodology to update</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.VoluntaryMethodologyController.Delete(NCCRD.Database.Models.VoluntaryMethodology)">
            <summary>
            Delete VoluntaryMethodology
            </summary>
            <param name="voluntaryMethodology">VoluntaryMethodology to delete</param>
            <returns>True/False</returns>
        </member>
        <member name="M:NCCRD.Services.Data.Controllers.VoluntaryMethodologyController.DeleteById(System.Int32)">
            <summary>
            Delete VoluntaryMethodology by Id
            </summary>
            <param name="id">Id of VoluntaryMethodology to delete</param>
            <returns>True/False</returns>
        </member>
    </members>
</doc>
