// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using NCCRD.Services.DataV2.Database.Contexts;
using System;

namespace NCCRD.Services.DataV2.Migrations
{
    [DbContext(typeof(SQLDBContext))]
    partial class SQLDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.AccessRight", b =>
                {
                    b.Property<int>("AccessRightId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowAdd");

                    b.Property<bool>("AllowDelete");

                    b.Property<bool>("AllowRead");

                    b.Property<bool>("AllowUpdate");

                    b.Property<int>("SitePageId");

                    b.Property<int>("UserRoleId");

                    b.HasKey("AccessRightId");

                    b.HasIndex("SitePageId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("AccessRights");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.AdaptationDetail", b =>
                {
                    b.Property<int>("AdaptationDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdaptationPurposeId");

                    b.Property<string>("Description");

                    b.Property<int>("ProjectId");

                    b.Property<int?>("SectorId");

                    b.HasKey("AdaptationDetailId");

                    b.HasIndex("AdaptationPurposeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SectorId");

                    b.ToTable("AdaptationDetails");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.AdaptationPurpose", b =>
                {
                    b.Property<int>("AdaptationPurposeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("AdaptationPurposeId");

                    b.ToTable("AdaptationPurpose");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.AppLog", b =>
                {
                    b.Property<int>("AppLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActiveUserId");

                    b.Property<DateTime>("LogTime");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<string>("MessageDetail");

                    b.HasKey("AppLogId");

                    b.HasIndex("ActiveUserId");

                    b.ToTable("AppLog");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.CarbonCredit", b =>
                {
                    b.Property<int>("CarbonCreditId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("CarbonCreditId");

                    b.ToTable("CarbonCredit");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.CarbonCreditMarket", b =>
                {
                    b.Property<int>("CarbonCreditMarketId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("CarbonCreditMarketId");

                    b.ToTable("CarbonCreditMarket");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.CDMMethodology", b =>
                {
                    b.Property<int>("CDMMethodologyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("CDMMethodologyId");

                    b.ToTable("CDMMethodology");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.CDMStatus", b =>
                {
                    b.Property<int>("CDMStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("CDMStatusId");

                    b.ToTable("CDMStatus");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd();

                    b.HasKey("DriverId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.Feasibility", b =>
                {
                    b.Property<int>("FeasibilityId")
                        .ValueGeneratedOnAdd();

                    b.HasKey("FeasibilityId");

                    b.ToTable("Feasibility");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.Funder", b =>
                {
                    b.Property<int>("FunderId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("FunderId");

                    b.ToTable("Funders");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.FundingStatus", b =>
                {
                    b.Property<int>("FundingStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("FundingStatusId");

                    b.ToTable("FundingStatus");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.Hazard", b =>
                {
                    b.Property<int>("HazardId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DriverId");

                    b.Property<int>("StockId");

                    b.HasKey("HazardId");

                    b.HasIndex("DriverId");

                    b.HasIndex("StockId");

                    b.ToTable("Hazards");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("LatCalculated");

                    b.Property<double?>("LatDegree");

                    b.Property<double?>("LatDirection");

                    b.Property<double?>("LatMinutes");

                    b.Property<double?>("LatSeconds");

                    b.Property<double?>("LonCalculated");

                    b.Property<double?>("LonDegree");

                    b.Property<double?>("LonDirection");

                    b.Property<double?>("LonMinutes");

                    b.Property<double?>("LonSeconds");

                    b.HasKey("LocationId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.LocationType", b =>
                {
                    b.Property<int>("LocationTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("LocationTypeId");

                    b.ToTable("LocationType");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.MAOption", b =>
                {
                    b.Property<int>("MAOptionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("FeasibilityId");

                    b.Property<int>("HazardId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int>("SectorId");

                    b.HasKey("MAOptionId");

                    b.HasIndex("FeasibilityId");

                    b.HasIndex("HazardId");

                    b.HasIndex("SectorId");

                    b.ToTable("MAOptions");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.MitigationDetail", b =>
                {
                    b.Property<int>("MitigationDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CDMMethodologyId");

                    b.Property<string>("CDMProjectNumber")
                        .HasMaxLength(450);

                    b.Property<int?>("CDMStatusId");

                    b.Property<int>("CarbonCreditId");

                    b.Property<int?>("CarbonCreditMarketId");

                    b.Property<int?>("Other");

                    b.Property<string>("OtherDescription");

                    b.Property<int>("ProjectId");

                    b.Property<int?>("SectorId");

                    b.Property<int?>("VCS");

                    b.Property<int?>("VoluntaryGoldStandardId");

                    b.Property<int?>("VoluntaryMethodologyId");

                    b.HasKey("MitigationDetailId");

                    b.HasIndex("CDMMethodologyId");

                    b.HasIndex("CDMStatusId");

                    b.HasIndex("CarbonCreditId");

                    b.HasIndex("CarbonCreditMarketId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SectorId");

                    b.HasIndex("VoluntaryGoldStandardId");

                    b.HasIndex("VoluntaryMethodologyId");

                    b.ToTable("MitigationDetails");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.MitigationEmissionsData", b =>
                {
                    b.Property<int>("MitigationEmissionsDataId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("BioWaste");

                    b.Property<double?>("BioWaste_CO2e");

                    b.Property<double?>("CH4");

                    b.Property<double?>("CH4_CO2e");

                    b.Property<double?>("CO2");

                    b.Property<double?>("FossilFuelElecRed");

                    b.Property<double?>("FossilFuelElecRed_CO2e");

                    b.Property<double?>("Geothermal");

                    b.Property<double?>("Geothermal_CO2e");

                    b.Property<double?>("HFC");

                    b.Property<double?>("HFC_CO2e");

                    b.Property<double?>("Hydro");

                    b.Property<double?>("Hydro_CO2e");

                    b.Property<double?>("N2O");

                    b.Property<double?>("N2O_CO2e");

                    b.Property<double?>("PFC");

                    b.Property<double?>("PFC_CO2e");

                    b.Property<int>("ProjectId");

                    b.Property<double?>("SF6");

                    b.Property<double?>("SF6_CO2e");

                    b.Property<double?>("Solar");

                    b.Property<double?>("Solar_CO2e");

                    b.Property<double?>("Tidal");

                    b.Property<double?>("Tidal_CO2e");

                    b.Property<double?>("Wind");

                    b.Property<double?>("Wind_CO2e");

                    b.Property<int>("Year");

                    b.HasKey("MitigationEmissionsDataId");

                    b.HasIndex("ProjectId");

                    b.ToTable("MitigationEmissionsData");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.OptionFunder", b =>
                {
                    b.Property<int>("OptionFunderId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FunderId");

                    b.Property<int>("MAOptionId");

                    b.HasKey("OptionFunderId");

                    b.HasIndex("FunderId");

                    b.HasIndex("MAOptionId");

                    b.ToTable("OptionFunder");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.OptionRegion", b =>
                {
                    b.Property<int>("OptionRegionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MAOptionId");

                    b.Property<int>("RegionId");

                    b.HasKey("OptionRegionId");

                    b.HasIndex("MAOptionId");

                    b.HasIndex("RegionId");

                    b.ToTable("OptionRegion");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlternativeContact")
                        .HasMaxLength(450);

                    b.Property<string>("AlternativeContactEmail")
                        .HasMaxLength(450);

                    b.Property<decimal?>("BudgetLower");

                    b.Property<decimal?>("BudgetUpper");

                    b.Property<int>("EndYear");

                    b.Property<string>("HostOrganisation")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("HostPartner")
                        .HasMaxLength(450);

                    b.Property<string>("LeadAgent")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Link")
                        .HasMaxLength(450);

                    b.Property<int?>("MAOptionId");

                    b.Property<string>("ProjectDescription");

                    b.Property<int>("ProjectManagerId");

                    b.Property<int>("ProjectStatusId");

                    b.Property<int?>("ProjectSubTypeId");

                    b.Property<string>("ProjectTitle")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int>("ProjectTypeId");

                    b.Property<bool?>("ReminderSent");

                    b.Property<int>("StartYear");

                    b.Property<string>("ValidationComments");

                    b.Property<int?>("ValidationStatusId");

                    b.HasKey("ProjectId");

                    b.HasAlternateKey("ProjectTitle")
                        .HasName("ProjectTitleIndex");

                    b.HasIndex("MAOptionId");

                    b.HasIndex("ProjectManagerId");

                    b.HasIndex("ProjectStatusId");

                    b.HasIndex("ProjectSubTypeId");

                    b.HasIndex("ProjectTypeId");

                    b.HasIndex("ValidationStatusId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.ProjectFunder", b =>
                {
                    b.Property<int>("ProjectFunderId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FunderId");

                    b.Property<int?>("FundingStatusId");

                    b.Property<int>("ProjectId");

                    b.HasKey("ProjectFunderId");

                    b.HasIndex("FunderId");

                    b.HasIndex("FundingStatusId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectFunder");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.ProjectLocation", b =>
                {
                    b.Property<int>("ProjectLocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LocationId");

                    b.Property<int>("ProjectId");

                    b.HasKey("ProjectLocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectLocation");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.ProjectRegion", b =>
                {
                    b.Property<int>("ProjectRegionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProjectId");

                    b.Property<int>("RegionId");

                    b.HasKey("ProjectRegionId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RegionId");

                    b.ToTable("ProjectRegion");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.ProjectStatus", b =>
                {
                    b.Property<int>("ProjectStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("ProjectStatusId");

                    b.ToTable("ProjectStatus");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.ProjectSubType", b =>
                {
                    b.Property<int>("ProjectSubTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("ProjectTypeId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("ProjectSubTypeId");

                    b.HasIndex("ProjectTypeId");

                    b.ToTable("ProjectSubType");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.ProjectType", b =>
                {
                    b.Property<int>("ProjectTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("ProjectTypeId");

                    b.ToTable("ProjectType");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LocationTypeId");

                    b.Property<int?>("ParentRegionId");

                    b.Property<string>("RegionDesription");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("RegionId");

                    b.HasIndex("LocationTypeId");

                    b.HasIndex("ParentRegionId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.ResearchDetail", b =>
                {
                    b.Property<int>("ResearchDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("PaperLink")
                        .HasMaxLength(450);

                    b.Property<int>("ProjectId");

                    b.Property<int>("ResearchTypeId");

                    b.Property<int?>("SectorId");

                    b.Property<int>("TargetAudienceId");

                    b.HasKey("ResearchDetailId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ResearchTypeId");

                    b.HasIndex("SectorId");

                    b.HasIndex("TargetAudienceId");

                    b.ToTable("ResearchDetails");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.ResearchType", b =>
                {
                    b.Property<int>("ResearchTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("ResearchTypeId");

                    b.ToTable("ResearchType");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.Sector", b =>
                {
                    b.Property<int>("SectorId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ParentSectorId");

                    b.Property<int>("SectorTypeId");

                    b.Property<int?>("TypologyId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("SectorId");

                    b.HasIndex("ParentSectorId");

                    b.HasIndex("SectorTypeId");

                    b.HasIndex("TypologyId");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.SectorType", b =>
                {
                    b.Property<int>("SectorTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("SectorTypeId");

                    b.ToTable("SectorType");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.SitePage", b =>
                {
                    b.Property<int>("SitePageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PageTitle")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("SitePageId");

                    b.ToTable("SitePages");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd();

                    b.HasKey("StockId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.TargetAudience", b =>
                {
                    b.Property<int>("TargetAudienceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("TargetAudienceId");

                    b.ToTable("TargetAudience");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.Title", b =>
                {
                    b.Property<int>("TitleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("TitleId");

                    b.ToTable("Title");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.Typology", b =>
                {
                    b.Property<int>("TypologyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("TypologyId");

                    b.ToTable("Typology");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Blocked");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(450);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("JobTitle")
                        .HasMaxLength(450);

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(450);

                    b.Property<string>("Organisation")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(450);

                    b.Property<string>("PhysicalAddressCountry")
                        .HasMaxLength(450);

                    b.Property<string>("PhysicalAddressLine1")
                        .HasMaxLength(450);

                    b.Property<string>("PhysicalAddressLine2")
                        .HasMaxLength(450);

                    b.Property<string>("PhysicalAddressLine3")
                        .HasMaxLength(450);

                    b.Property<string>("PhysicalAddressPostalCode")
                        .HasMaxLength(450);

                    b.Property<string>("PhysicalAddressProvince")
                        .HasMaxLength(450);

                    b.Property<string>("PhysicalAddressTown")
                        .HasMaxLength(450);

                    b.Property<string>("PostalAddressCountry")
                        .HasMaxLength(450);

                    b.Property<string>("PostalAddressLine1")
                        .HasMaxLength(450);

                    b.Property<string>("PostalAddressLine2")
                        .HasMaxLength(450);

                    b.Property<string>("PostalAddressLine3")
                        .HasMaxLength(450);

                    b.Property<string>("PostalAddressPostalCode")
                        .HasMaxLength(450);

                    b.Property<string>("PostalAddressProvince")
                        .HasMaxLength(450);

                    b.Property<string>("PostalAddressTown")
                        .HasMaxLength(450);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int>("TitleId");

                    b.Property<int>("UserRoleId");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.HasIndex("TitleId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("UserRoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.ValidationStatus", b =>
                {
                    b.Property<int>("ValidationStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("ValidationStatusId");

                    b.ToTable("ValidationStatus");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.VersionHistory", b =>
                {
                    b.Property<int>("VersionHistoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("VersionNumber")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("VersionHistoryId");

                    b.ToTable("VersionHistory");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.VoluntaryGoldStandard", b =>
                {
                    b.Property<int>("VoluntaryGoldStandardId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("VoluntaryGoldStandardId");

                    b.ToTable("VoluntaryGoldStandard");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.VoluntaryMethodology", b =>
                {
                    b.Property<int>("VoluntaryMethodologyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("VoluntaryMethodologyId");

                    b.ToTable("VoluntaryMethodology");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.AccessRight", b =>
                {
                    b.HasOne("NCCRD.Services.DataV2.DBModels.SitePage", "SitePage")
                        .WithMany()
                        .HasForeignKey("SitePageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.AdaptationDetail", b =>
                {
                    b.HasOne("NCCRD.Services.DataV2.DBModels.AdaptationPurpose", "AdaptationPurpose")
                        .WithMany()
                        .HasForeignKey("AdaptationPurposeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.AppLog", b =>
                {
                    b.HasOne("NCCRD.Services.DataV2.DBModels.User", "ActiveUser")
                        .WithMany()
                        .HasForeignKey("ActiveUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.Hazard", b =>
                {
                    b.HasOne("NCCRD.Services.DataV2.DBModels.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.MAOption", b =>
                {
                    b.HasOne("NCCRD.Services.DataV2.DBModels.Feasibility", "Feasibility")
                        .WithMany()
                        .HasForeignKey("FeasibilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.Hazard", "Hazard")
                        .WithMany()
                        .HasForeignKey("HazardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.MitigationDetail", b =>
                {
                    b.HasOne("NCCRD.Services.DataV2.DBModels.CDMMethodology", "CDMMethodology")
                        .WithMany()
                        .HasForeignKey("CDMMethodologyId");

                    b.HasOne("NCCRD.Services.DataV2.DBModels.CDMStatus", "CDMStatus")
                        .WithMany()
                        .HasForeignKey("CDMStatusId");

                    b.HasOne("NCCRD.Services.DataV2.DBModels.CarbonCredit", "CarbonCredit")
                        .WithMany()
                        .HasForeignKey("CarbonCreditId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.CarbonCreditMarket", "CarbonCreditMarket")
                        .WithMany()
                        .HasForeignKey("CarbonCreditMarketId");

                    b.HasOne("NCCRD.Services.DataV2.DBModels.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId");

                    b.HasOne("NCCRD.Services.DataV2.DBModels.VoluntaryGoldStandard", "VoluntaryGoldStandard")
                        .WithMany()
                        .HasForeignKey("VoluntaryGoldStandardId");

                    b.HasOne("NCCRD.Services.DataV2.DBModels.VoluntaryMethodology", "VoluntaryMethodology")
                        .WithMany()
                        .HasForeignKey("VoluntaryMethodologyId");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.MitigationEmissionsData", b =>
                {
                    b.HasOne("NCCRD.Services.DataV2.DBModels.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.OptionFunder", b =>
                {
                    b.HasOne("NCCRD.Services.DataV2.DBModels.Funder", "Funder")
                        .WithMany()
                        .HasForeignKey("FunderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.MAOption", "MAOption")
                        .WithMany()
                        .HasForeignKey("MAOptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.OptionRegion", b =>
                {
                    b.HasOne("NCCRD.Services.DataV2.DBModels.MAOption", "MAOption")
                        .WithMany()
                        .HasForeignKey("MAOptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.Project", b =>
                {
                    b.HasOne("NCCRD.Services.DataV2.DBModels.MAOption", "MAOption")
                        .WithMany()
                        .HasForeignKey("MAOptionId");

                    b.HasOne("NCCRD.Services.DataV2.DBModels.User", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("ProjectManagerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.ProjectStatus", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.ProjectSubType", "ProjectSubType")
                        .WithMany()
                        .HasForeignKey("ProjectSubTypeId");

                    b.HasOne("NCCRD.Services.DataV2.DBModels.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.ValidationStatus", "ValidationStatus")
                        .WithMany()
                        .HasForeignKey("ValidationStatusId");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.ProjectFunder", b =>
                {
                    b.HasOne("NCCRD.Services.DataV2.DBModels.Funder", "Funder")
                        .WithMany()
                        .HasForeignKey("FunderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.FundingStatus", "FundingStatus")
                        .WithMany()
                        .HasForeignKey("FundingStatusId");

                    b.HasOne("NCCRD.Services.DataV2.DBModels.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.ProjectLocation", b =>
                {
                    b.HasOne("NCCRD.Services.DataV2.DBModels.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.ProjectRegion", b =>
                {
                    b.HasOne("NCCRD.Services.DataV2.DBModels.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.ProjectSubType", b =>
                {
                    b.HasOne("NCCRD.Services.DataV2.DBModels.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.Region", b =>
                {
                    b.HasOne("NCCRD.Services.DataV2.DBModels.LocationType", "LocationType")
                        .WithMany()
                        .HasForeignKey("LocationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.Region", "ParentRegion")
                        .WithMany()
                        .HasForeignKey("ParentRegionId");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.ResearchDetail", b =>
                {
                    b.HasOne("NCCRD.Services.DataV2.DBModels.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.ResearchType", "ResearchType")
                        .WithMany()
                        .HasForeignKey("ResearchTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId");

                    b.HasOne("NCCRD.Services.DataV2.DBModels.TargetAudience", "TargetAudience")
                        .WithMany()
                        .HasForeignKey("TargetAudienceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.Sector", b =>
                {
                    b.HasOne("NCCRD.Services.DataV2.DBModels.Sector", "ParentSector")
                        .WithMany()
                        .HasForeignKey("ParentSectorId");

                    b.HasOne("NCCRD.Services.DataV2.DBModels.SectorType", "SectorType")
                        .WithMany()
                        .HasForeignKey("SectorTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.Typology", "Typology")
                        .WithMany()
                        .HasForeignKey("TypologyId");
                });

            modelBuilder.Entity("NCCRD.Services.DataV2.DBModels.User", b =>
                {
                    b.HasOne("NCCRD.Services.DataV2.DBModels.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NCCRD.Services.DataV2.DBModels.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
